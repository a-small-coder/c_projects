const int MAXARRAYSIZE = 20, MAXVALUE = 1000, MINVALUE = -1000, MAXN = 50;
int min_value, max_value, array_size, input_array_size, summa;
int min_number, max_number, chet_count, nechet_count;
String^ array_str;
bool is_array_input, is_ready_to_work
bool IsArrayInput() {
	bool check;
	if (inputArr->Text->Length > 0) {
		check = true;
		array_str = inputArr->Text + " ";
		// определение размера введенного массива
		input_array_size = 0;
		for (int i = 0; i < array_str->Length; i++) {
			if (array_str[i] == ' ' || array_str[i] == ';') {
				input_array_size += 1;
			}
		}
		array_size = input_array_size;
	}
	else {
		check = false;
	}
	return check;
	}

void get_arr() {
	String^ text_message = "";
	// проверка на наличие массива
	is_array_input = IsArrayInput();
	// чтение массива из textbox
	if (is_array_input) {
		array_str = inputArr->Text;

		int* arr = new int[array_size];
		int start_i = 0, end_i = 0, count_numbers = 0;
		is_ready_to_work = true;
		for (int i = array_str->Length - 1; i > 0; i--) {
			if (array_str[i] == ' ') {
				array_str = array_str->Substring(0, i);
			}
			else {
				break;
			}
		}
		array_str += " ";
		for (int i = 0; i < array_str->Length; i++) {
			if (array_str[i] != ' ') {
				end_i += 1;
			}
			else {
				if (i > 0 && array_str[i - 1] == ' ') {
					start_i = i + 1;
					end_i = start_i;
				}
				else {
					try {
						arr[count_numbers] = Convert::ToInt32(array_str->Substring(start_i, end_i - start_i));
						count_numbers += 1;

					}
					catch (...) {
						is_ready_to_work = false;
						break;
					}
					start_i = i + 1;
					end_i = start_i;
				}
					

			}
		}
		// массив успешно прочитан
		if (is_ready_to_work) {
			summa = 0;
			chet_count = 0;
			nechet_count = 0;
			min_number = MAXVALUE;
			max_number = MINVALUE;
			chet_numbers_str = "";
			nechet_numbers_str = "";
			for (int i = 0; i < count_numbers; i++) {
				summa += arr[i];
				if (arr[i] > max_number)
					max_number = arr[i];
				if (arr[i] < min_number)
					min_number = arr[i];
				if (arr[i] % 2 == 0) {
					chet_count += 1;
					chet_numbers_str += Convert::ToString(arr[i]) + " ";
				}
				else {
					nechet_count += 1;
					nechet_numbers_str += Convert::ToString(arr[i]) + " ";
				}
			}
			// подстановка характеристик, если массив введен пользователем
			txtArraySize->Text = Convert::ToString(count_numbers);
			txtMaxNumber->Text = Convert::ToString(max_number + 1);
			txtMinNumber->Text = Convert::ToString(min_number - 1);
		}
		// ошибки при чтении массива
		else {
			System::Windows::Forms::DialogResult result = MessageBox::Show("Неверный ввод массива" + text_message, \
				"Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Warning);
		}
		inputArr->Text = "";
		for (int i = 0; i < count_numbers; i++) {
			inputArr->Text += Convert::ToString(arr[i]) + " ";
		}

		delete[] arr;
	}
}

void update_generation_data() {
		// определение характеристик массива
		if (txtArraySize->Text != "" && txtMinNumber->Text != "" && txtMaxNumber->Text != "") {
			array_size = Convert::ToInt32(txtArraySize->Text);
			min_value = Convert::ToInt32(txtMinNumber->Text);
			max_value = Convert::ToInt32(txtMaxNumber->Text);
		}
		get_arr();
		
	}
private: System::Void inputArr_Leave(System::Object^ sender, System::EventArgs^ e) {
	update_generation_data();
}